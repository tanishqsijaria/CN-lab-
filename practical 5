#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 10143
#define BUFFER_SIZE 1059

int main() {
    int sock;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];
    FILE *fp;

    // Create UDP socket
    sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock < 0) {
        perror("Socket creation failed");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Bind socket
    if (bind(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        exit(1);
    }
    printf("UDP Server listening on port %d...\n", PORT);

    // Receive file name first
    char filename[256];
    int name_len = recvfrom(sock, filename, sizeof(filename), 0,
                            (struct sockaddr*)&client_addr, &addr_len);
    if (name_len <= 0) {
        perror("Failed to receive filename");
        exit(1);
    }
    filename[name_len] = '\0';
    printf("Receiving file: %s\n", filename);

    // Open file for writing
    fp = fopen(filename, "wb");
    if (!fp) {
        perror("File open failed");
        exit(1);
    }

    // Receive file content
    ssize_t bytes;
    while (1) {
        bytes = recvfrom(sock, buffer, BUFFER_SIZE, 0,
                         (struct sockaddr*)&client_addr, &addr_len);
        if (bytes <= 0) break; // End of file signaled by client sending 0 bytes
        fwrite(buffer, 1, bytes, fp);
        buffer[bytes] = '\0';
        printf("%s", buffer); // Live print
    }

    printf("\n\nFile '%s' received successfully.\n", filename);

    fclose(fp);
    close(sock);
    return 0;
}
